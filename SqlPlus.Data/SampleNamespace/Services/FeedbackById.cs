// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlPlus.net
//     For more information on SqlPlus.net visit http://www.SqlPlus.net
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SqlPlus.Data.SampleNamespace.Models;

namespace SqlPlus.Data.SampleNamespace
{
    public partial class Service
    {

        /// <summary>
        /// Builds the command object for FeedbackById method.
        /// </summary>
        /// <param name="cnn">The connection that will execute the procedure.</param>
        /// <param name="input">FeedbackByIdInput instance for loading parameter values.</param>
        /// <returns>SqlCommand ready for execution.</returns>
        private SqlCommand GetFeedbackByIdCommand(SqlConnection cnn, IFeedbackByIdInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SET NOCOUNT ON;
SELECT
FeedbackId,
LastName,
FirstName,
Email,
Subject,
Message,
Created
FROM
dbo.Feedback
WHERE
FeedbackId = @FeedbackId;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@FeedbackId",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
				Value = (object)input.FeedbackId ?? DBNull.Value
            });

            return result;
        }

        private FeedbackByIdResult GetFeedbackByIdResultFromReader(SqlDataReader rdr)
        {
            FeedbackByIdResult result = new FeedbackByIdResult();

            result.FeedbackId = rdr.GetInt32(0);

            result.LastName = rdr.GetString(1);

            result.FirstName = rdr.GetString(2);

            result.Email = rdr.GetString(3);

            result.Subject = rdr.GetString(4);

            result.Message = rdr.GetString(5);

            result.Created = rdr.GetDateTime(6);

            return result;
        }


        private void FeedbackByIdCommand(SqlCommand cmd, FeedbackByIdOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                if(rdr.Read())
                {
                    output.ResultData = GetFeedbackByIdResultFromReader(rdr);
                }
                rdr.Close();
            }
        }

        /// <summary>
        /// Selects single row from dbo.Feedback table by identity column.
        /// SQL+ Routine: .FeedbackById - Authored by Alan Hyneman
        /// </summary>
        public FeedbackByIdOutput FeedbackById(IFeedbackByIdInput input, bool bypassValidation = false)
        {
            if(!bypassValidation)
            {
                if (!input.IsValid())
                {
		            throw new ArgumentException("FeedbackByIdInput fails validation - use the FeedbackByIdInput.IsValid() method prior to passing the input argument to the FeedbackById method.", "input");
                }
            }
            FeedbackByIdOutput output = new FeedbackByIdOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetFeedbackByIdCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    FeedbackByIdCommand(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if(idx > 0)
                {
                    System.Threading.Thread.Sleep(retryOptions.RetryIntervals[idx-1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetFeedbackByIdCommand(cnn, input))
                    {
                        cnn.Open();
						FeedbackByIdCommand(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    bool throwException = true;

                    if(retryOptions.TransientErrorNumbers.Contains(sqlException.Number))
                    {
                        throwException = (idx == retryOptions.RetryIntervals.Count);

                        if (retryOptions.Logger != null)
                        {
                            retryOptions.Logger.Log(sqlException);
                        }
                    }
                    if(throwException)
                    {
                        throw;
                    }
                }
            }
            return output;
        }
    }
}